version: '3.8'

x-common: 
# -------------------------------------------- #
# -- SERVER                                 -- #
# -------------------------------------------- #
  server-http: &server-http
    ports: 
      - ${SERVER_HTTP_PORT}:${SERVER_INTERNAL_HTTP_PORT}

  server-socket: &server-socket
    ports: 
      - ${SERVER_SOCKET_PORT}:${SERVER_INTERNAL_SOCKET_PORT}


# -------------------------------------------- #
# -- API                                    -- #
# -------------------------------------------- #
  api-ws: &api-ws
    ports:
      - ${API_WS_PORT}:${API_INTERNAL_WS_PORT}

  api-http: &api-http
    ports:
      - ${API_HTTP_PORT}:${API_INTERNAL_HTTP_PORT}


# -------------------------------------------- #
# -- FRONTEND                               -- #
# -------------------------------------------- #
  frontend:  &frontend
    ports:
      - ${FRONTEND_HTTP_PORT}:3000


# -------------------------------------------- #
# -- COMMONS & HEALTH                       -- #
# -------------------------------------------- #
  common: &common
    restart: always
    networks:
      - custom_network

  health: &health
    healthcheck:
      interval: 1s
      timeout: 3s
      retries: 3



# -------------------------------------------- #
# -- SERVICES                               -- #
# -------------------------------------------- #
services:
  dloc-database:
    image: mariadb:10.4
    container_name: dloc-database
    <<: [*common, *health]
    environment:
      TZ: Europe/Madrid
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command: ['mysqld', '--character-set-server=utf8', '--collation-server=utf8_general_ci']
    ports: 
      - ${MYSQL_PORT}:3306
    volumes:
      - ./dloc-database/volume:/var/lib/mysql
      - ./dloc-database/setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - ./dloc-database/app-database-backup.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} -e 'SELECT 1'"]

  dloc-server-http:
    image: dloc-server-http
    container_name: dloc-server-http
    <<: [*common, *health, *server-http]
    build:
      context: ./dloc-server
      dockerfile: Dockerfile
      args:
        SERVER_TYPE: http
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:${SERVER_INTERNAL_HTTP_PORT}/health || exit 1" 
    depends_on:
      dloc-database:
        condition: service_healthy

  dloc-server-socket:
    image: dloc-server-socket
    container_name: dloc-server-socket
    <<: [*common, *health, *server-socket]
    build:
      context: ./dloc-server
      dockerfile: Dockerfile
      args:
        SERVER_TYPE: socket
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:${SERVER_INTERNAL_SOCKET_PORT}/health || exit 1" 
    depends_on:
      dloc-database:
        condition: service_healthy

  dloc-api-http:
    image: dloc-api-http
    container_name: dloc-api-http
    <<: [*common, *health, *api-http]
    build:
      context: ./dloc-api
      dockerfile: Dockerfile
      args:
        SERVER_TYPE: http
    volumes:
      - ./dloc-api/device-images:/usr/src/app/device-images
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:${API_INTERNAL_HTTP_PORT}/health || exit 1" 
    depends_on:
      dloc-database:
        condition: service_healthy

  dloc-api-ws:
    image: dloc-api-ws
    container_name: dloc-api-ws
    <<: [*common, *health, *api-ws]
    build:
      context: ./dloc-api
      dockerfile: Dockerfile
      args:
        SERVER_TYPE: ws
    healthcheck:
      test: "wscat -c ws://localhost:${API_INTERNAL_WS_PORT}/health || exit 1" 
    depends_on:
      dloc-database:
        condition: service_healthy

  dloc-frontend:
    image: dloc-frontend
    container_name: dloc-frontend
    <<: [*common, *frontend]
    build:
      context: ./dloc-frontend
    depends_on:
      dloc-database:
        condition: service_healthy
      dloc-api-http:
        condition: service_healthy
      dloc-api-ws:
        condition: service_healthy
# -------------------------------------------- #

# -------------------------------------------- #
networks:
  custom_network:
    name: ${NETWORK}
    external: ${TRAEFIK_EXT_NETWORK}
# -------------------------------------------- #
